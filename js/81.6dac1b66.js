(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[81],{

/***/ 597:
/***/ (function(module, exports) {

module.exports = "Form 表单\n===\n\n由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据\n\n\n### 表单集合\n\n<!--DemoStart--> \n```js\nconstructor(props) {\n  super(props);\n  this.state = {\n    form: {\n      name: \"wui\",\n      password: \"\",\n      email: \"wwww@qq.com\",\n      select: \"选项4\",\n      timeSelect: new Date(2017, 6, 28, 15, 51),\n      online: true,\n      carte: ['湖北菜'],\n      category_radio: [\"保密\"],\n      category: [\"香蕉\",\"橘子\"],\n      radio:1,\n      radioGroup:\"\", // 如果是数字类型，必须设置组件 value={6} 也是数字型\n      radioGroupDisabled:\"乔布斯\",\n      inputNumber:0,\n    },\n    selectOptions: [\n      { value: '选项1', label: '红葡萄酒' }, \n      { value: '选项2', label: '绍兴黄酒', disabled: true}, \n      { value: '选项3', label: '燕京啤酒' }, \n      { value: '选项4', label: '楚乡王白酒' }, \n      { value: '选项5', label: '五粮液' },\n    ],\n    tagRadioOptions:[\n      {color:\"purple\", value:'保密'},\n      {color:\"orange\", value:'男生'},\n      {color:\"green\", value:'女生'}\n    ],\n    tagOptions:[\n      {color:\"purple\", value:'苹果'},\n      {color:\"orange\", value:'橘子'},\n      {color:\"green\", value:'香蕉'}\n    ],\n    radioOptionsDisabled:[\n      {label: '乔布斯', value: '乔布斯' },\n      {label: '比尔盖茨', value: '比尔盖茨' },\n      {label: '乔纳森', value: '乔纳森' ,disabled: true },\n    ],\n    checkboxOption:['四川菜', '湖北菜', '湘菜', '粤菜'],\n    rules:{\n      name:[\n        { required: true, message: '请输入活动名称'},\n        { min: 4, message: '长度不够！'}\n      ],\n      timeSelect:[\n        { required: true, message: '请选择时间！'},\n      ],\n      password:[\n        { required: true, message: '不能为空！'},\n        { min: 6, message: '长度不够！'},\n        { max: 14, message: '长度超出！'}\n      ],\n      email:[\n        {type: 'email', message: '输入的不是E-mail!'}\n      ],\n      category:[\n        {required: true, message: '必须选择一个选项！'}\n      ],\n      carte:[\n        {required: true, message: '不能为空！'},\n        {\n          // 自定义校验规则 callback() 必须调用\n          validator:(rule, value,callback)=>{\n            if(value.length > 1){\n              callback();\n            }else{\n              callback(new Error(\"至少选两个选项\"));\n            }\n          }\n        }\n      ]\n    },\n  };\n}\n\nonChange(key,e, value) {\n  const {form} = this.state;\n  console.log(\"value:==:\",key,value,e)\n  form[key] = value;\n  this.setState({form});\n}\n\nhandleSubmit(e) {\n  e.preventDefault();\n  this.form.validate((valid,dataValues) => {\n    console.log(\"返回内容:\",dataValues,valid)\n    if (valid) {\n      alert('submit!');\n    } else {\n      console.log('error submit!!');\n      return false;\n    }\n  });\n}\n\nhandleReset(e) {\n  e.preventDefault();\n  // console.log(\"--reset22:\",this.state.form)\n  this.form.resetFields((model)=>{\n    this.setState({form:model})\n  });\n}\n\nrender() {\n  const {form,rules} = this.state;\n  const FormItem = Form.Item;\n  const TagGroup = Tag.Group;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 4 },\n      className:\"colspanlab\"\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 14 },\n      className:\"colspan\"\n    },\n  };\n  const wrapperCol = {\n    wrapperCol: {\n      xs: {span: 24, offset: 0, },\n      sm: {span: 14, offset: 4, },\n    },\n  }\n  return (\n    <Form style={{width:500}} ref={(component)=>{this.form=component}} model={form} rules={rules}>\n      <FormItem label={<span>用户名</span>} field=\"name\" {...formItemLayout} >\n        <Input \n          value={form.name} \n          placeholder=\"请输入用户名\"\n          onChange={this.onChange.bind(this, 'name')} />\n      </FormItem>\n      <FormItem label=\"密码\" field=\"password\" help=\"这里显示对密码的帮助，比如只能英文字母\"  {...formItemLayout} >\n        <Input \n          // 注意字段 password\n          value={form.password} \n          type=\"password\"\n          placeholder=\"请输入密码\"\n          icon=\"lock\"\n          onChange={this.onChange.bind(this, 'password')} />\n      </FormItem>\n      <FormItem label=\"输入数字\" field=\"inputNumber\" help=\"输入数字5~100\"  {...formItemLayout} >\n        <InputNumber value={form.inputNumber} onChange={this.onChange.bind(this,'inputNumber')} min=\"5\" max=\"100\"></InputNumber>\n      </FormItem>\n      <FormItem label=\"选择器\" field=\"select\" help=\"输入数字5~100\"  {...formItemLayout} >\n        <Select onChange={this.onChange.bind(this,'select')} value={form.select}>\n          {\n            this.state.selectOptions.map(elm => {\n              return <Select.Option key={elm.value} label={elm.label} value={elm.value} disabled={elm.disabled} />\n            })\n          }\n        </Select>\n      </FormItem>\n      <FormItem label=\"时间选择\" field=\"timeSelect\"  {...formItemLayout} >\n        <TimeSelect\n          start=\"08:30\"\n          step=\"00:15\"\n          end=\"18:30\"\n          //maxTime=\"12:30\"\n          //readOnly=\"2323\"\n          minTime=\"9:30\"\n          onChange={this.onChange.bind(this, 'timeSelect')}\n          value={form.timeSelect}\n          placeholder=\"选择时间\"\n          />\n      </FormItem>\n      <FormItem label=\"是否在线\" field=\"online\" {...formItemLayout} >\n        <Switch checked={form.online} \n         onChange={this.onChange.bind(this, 'online')}/>\n      </FormItem>\n      <FormItem label=\"邮箱\" field=\"email\" {...formItemLayout} >\n        <Input \n          value={form.email}\n          placeholder=\"请输入邮箱\"\n          onChange={this.onChange.bind(this, 'email')} />\n      </FormItem>\n      <FormItem label=\"分类单选\" field=\"category_radio\" {...formItemLayout} >\n        <TagGroup \n          options={this.state.tagRadioOptions}\n          checked={true}\n          isRadio={true}\n          checkedValues={form.category_radio} \n          onChange={this.onChange.bind(this, 'category_radio')}\n        />\n      </FormItem>\n      <FormItem label=\"分类多选\" field=\"category\" {...formItemLayout} >\n        <TagGroup \n          options={this.state.tagOptions}\n          checked={true}\n          checkedValues={form.category} \n          onChange={this.onChange.bind(this, 'category')}\n        />\n      </FormItem>\n      <FormItem label=\"多选\" field=\"carte\" {...formItemLayout} >\n        <Checkbox.Group \n          options={this.state.checkboxOption}\n          checkedValues={form.carte} \n          onChange={this.onChange.bind(this, 'carte')} \n        />\n      </FormItem>\n      <FormItem label=\"单选\" field=\"radio\" {...formItemLayout} >\n        <div style={{margin:\"7px 0\"}}>\n          <Radio value={1} checked={form.radio === 1} \n            onChange={this.onChange.bind(this,\"radio\")}>备选项</Radio>\n          <Radio value={2} checked={form.radio === 2} \n            onChange={this.onChange.bind(this,\"radio\")}>备选项</Radio>\n        </div>\n      </FormItem>\n      <FormItem label=\"单选组\" field=\"radioGroup\" {...formItemLayout} >\n        <div style={{margin:\"7px 0\"}}>\n          <Radio.Group value={form.radioGroup} onChange={this.onChange.bind(this,'radioGroup')}>\n            <Radio value=\"3\">高晓松</Radio>\n            <Radio value=\"6\">周杰伦</Radio>\n            <Radio value=\"9\">黄家驹</Radio>\n          </Radio.Group>\n        </div>\n      </FormItem>\n      <FormItem label=\"单选组配置\" field=\"radioGroupDisabled\" {...formItemLayout} >\n        <div style={{margin:\"7px 0\"}}>\n          <Radio.Group \n            options={this.state.radioOptionsDisabled} \n            value={form.radioGroupDisabled} \n            onChange={this.onChange.bind(this,'radioGroupDisabled')} />\n        </div>\n      </FormItem>\n      <FormItem {...wrapperCol}>\n        <Button size=\"small\" type=\"primary\" onClick={this.handleSubmit.bind(this)}>提交</Button>\n        <Button size=\"small\" onClick={this.handleReset.bind(this)}>重置</Button>\n        <Button size=\"small\" onClick={()=>{\n          console.log(this.state.form)\n          }}>查看State</Button>\n      </FormItem>\n    </Form>\n  )\n}\n```\n<!--End-->\n\n### 基础用法\n\n<!--DemoStart--> \n```js\nconstructor(props) {\n  super(props);\n  this.state = {\n    form: {\n      name:'wui',\n      password: '',\n      email: '',\n    },\n    rules:{\n      name:[\n        { required: true, message: '请输入活动名称'},\n        { min: 5, message: '长度不够！'}\n      ],\n      password:[\n        { required: true, message: '不能为空！'},\n        { min: 6, message: '长度不够！'},\n        { max: 14, message: '长度超出！'}\n      ],\n      email:[\n        {type: 'email', message: '输入的不是E-mail!'}\n      ]\n    }\n  }\n}\n\nonChange(key,e, value) {\n  const {form} = this.state;\n  form[key] = value;\n  this.setState({form});\n}\n\nhandleSubmit(e) {\n  e.preventDefault();\n  this.form.validate((valid,dataValues) => {\n    console.log(\"返回内容:\",dataValues,valid)\n    if (valid) {\n      alert('submit!');\n    } else {\n      console.log('error submit!!');\n      return false;\n    }\n  });\n}\n\nhandleReset(e) {\n  e.preventDefault();\n  this.form.resetFields((model)=>{\n    this.setState({form:model})\n  });\n}\n\nrender() {\n  const {form,rules} = this.state;\n  const FormItem = Form.Item;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 4 },\n      className:\"colspanlab\"\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 14 },\n      className:\"colspan\"\n    },\n  };\n  const wrapperCol = {\n    wrapperCol: {\n      xs: {span: 24, offset: 0, },\n      sm: {span: 14, offset: 4, },\n    },\n  }\n  return (\n    <Form style={{width:500}} ref={(component)=>{this.form=component}} model={form} rules={rules}>\n      <FormItem label={<span>用户名</span>} field=\"name\" {...formItemLayout} >\n        <Input \n          value={form.name} \n          preIcon=\"user\"\n          placeholder=\"请输入用户名\"\n          onChange={this.onChange.bind(this, 'name')} />\n      </FormItem>\n      <FormItem label=\"密码\" field=\"password\" {...formItemLayout} >\n        <Input \n          // 注意字段 password\n          value={form.password} \n          preIcon=\"unlock\"\n          type=\"password\"\n          placeholder=\"请输入密码\"\n          onChange={this.onChange.bind(this, 'password')} />\n      </FormItem>\n      <FormItem label=\"邮箱\" field=\"email\" {...formItemLayout} >\n        <Input \n          value={form.email}\n          placeholder=\"请输入邮箱\"\n          onChange={this.onChange.bind(this, 'email')} />\n      </FormItem>\n      <FormItem {...wrapperCol}>\n        <Button size=\"small\" type=\"primary\" onClick={this.handleSubmit.bind(this)}>提交</Button>\n        <Button size=\"small\" onClick={this.handleReset.bind(this)}>重置</Button>\n      </FormItem>\n    </Form>\n  )\n}\n```\n<!--End-->\n\n\n### 表单布局\n\n表单有三种布局，layout = `horizontal`横、`vertical`竖、`inline`行内；\n\n<!--DemoStart--> \n```js\nconstructor(props) {\n  super(props);\n  this.state = {\n    plainOptions:[\n        {color:\"purple\", value:'horizontal'},\n        {color:\"orange\", value:'vertical'},\n        {color:\"green\", value:'inline'}\n    ],\n    formLayout:'vertical',\n    form: {\n      name:'wui',\n      password: '',\n      email: '',\n    },\n    rules:{\n      name:[\n        { required: true, message: '请输入活动名称'},\n        { min: 5, message: '长度不够！'}\n      ],\n      password:[\n        { required: true, message: '不能为空！'},\n        { min: 6, message: '长度不够！'},\n        { max: 14, message: '长度超出！'}\n      ],\n      email:[\n        {type: 'email', message: '输入的不是E-mail!'}\n      ]\n    }\n  }\n}\n\nonChange(key,e, value) {\n  const {form} = this.state;\n  form[key] = value;\n  this.setState({form});\n}\n\nhandleSubmit(e) {\n  e.preventDefault();\n  this.form.validate((valid,dataValues) => {\n    console.log(\"返回内容:\",dataValues,valid)\n    if (valid) {\n      alert('submit!');\n    } else {\n      console.log('error submit!!');\n      return false;\n    }\n  });\n}\n\nhandleReset(e) {\n  e.preventDefault();\n  this.form.resetFields((model)=>{\n    this.setState({form:model})\n  });\n}\n\nrender() {\n  const {form,rules,formLayout} = this.state;\n  const FormItem = Form.Item;\n  const TagGroup = Tag.Group;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 4 },\n      className:\"colspanlab\"\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 14 },\n      className:\"colspan\"\n    },\n  };\n  const wrapperCol = {\n    wrapperCol: {\n      xs: {span: 24, offset: 0, },\n      sm: {span: 14, offset: 4, },\n    },\n  }\n  return (\n    <div>\n      <TagGroup \n        style={{marginBottom:25}}\n        options={this.state.plainOptions}\n        checked={true}\n        isRadio={true}\n        checkedValues={[this.state.formLayout]} \n        onChange={(e,checkedValues)=>{\n          console.log(\"checkedValues[0]::\",checkedValues[0])\n          this.setState({formLayout:checkedValues[0]})\n        }}\n      />\n      <Form \n        layout={formLayout} \n        style={{width:formLayout == \"inline\"?\"auto\":500}} ref={(component)=>{this.form=component}} model={form} rules={rules}>\n        <FormItem label={<span>用户名</span>} field=\"name\" {...formItemLayout} >\n          <Input \n            value={form.name} \n            preIcon=\"user\"\n            placeholder=\"请输入用户名\"\n            onChange={this.onChange.bind(this, 'name')} />\n        </FormItem>\n        <FormItem label=\"密码\" field=\"password\" {...formItemLayout} >\n          <Input \n            // 注意字段 password\n            value={form.password} \n            preIcon=\"unlock\"\n            type=\"password\"\n            placeholder=\"请输入密码\"\n            onChange={this.onChange.bind(this, 'password')} />\n        </FormItem>\n        <FormItem label=\"邮箱\" field=\"email\" {...formItemLayout} >\n          <Input \n            value={form.email}\n            placeholder=\"请输入邮箱\"\n            onChange={this.onChange.bind(this, 'email')} />\n        </FormItem>\n        <FormItem {...wrapperCol}>\n          <Button size=\"small\" type=\"primary\" onClick={this.handleSubmit.bind(this)}>提交</Button>\n          <Button size=\"small\" onClick={this.handleReset.bind(this)}>重置</Button>\n        </FormItem>\n      </Form>\n    </div>\n  )\n}\n```\n<!--End-->\n\n## API\n\n### Form\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| ref | React方法，提供Form组件内部方法调用 | String | - |\n| model | 表单数据对象，以及验证规则 | Object | - |\n| layout | 表单布局 `horizontal` `vertical` `inline` | String | `horizontal` |\n\n### Form refs\n\n```html\n<Form ref={(component)=>{this.form=component}}></Form>\n```\n\n上面定义form的ref值赋值给`this.form`\n\n```js\n// 表单重置\nthis.form.resetFields((model)=>{\n  this.setState({form:model})\n});\n\n// 表单验证\nthis.form.validate((valid,dataValues) => {\n  console.log(\"返回内容:\",dataValues,valid)\n  if (valid) {\n    alert('submit!');\n  } else {\n    console.log('error submit!!');\n    return false;\n  }\n});\n```\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| validate | 对整个表单进行校验的方法 | Function(valid:Boolean,dataValues:Object) | - |\n| resetFields | 对整个表单进行重置，将所有字段值重置为空并移除校验结果 | Function(model:Object) | - |\n\n### Form model\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| value | 表单数据对象 | Object、String、Array | - |\n| rules | 校验规则，参考下方文档 | Object[] | - |\n\n\n### Form.Item \n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| label | `label` 标签的文本 | String、ReactNode | - |\n| field | `field` 域的名称 | String、ReactNode | - |\n| labelCol | `label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}` | Object | - |\n| wrapperCol | 需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol` | Object | - |\n| help | 提示信息，如不设置，则会根据校验规则自动生成 | String、ReactNode | - |\n\n### 校验规则\n\n```js\n{\n    rules:[\n      { required: true, message: \"请输入活动名称\"},\n      { min: 12, message: \"长度不够！\"}\n    ]    \n}\n```\n\n`rules` 校验规则实例，校验使用的包[async-validator](https://github.com/yiminghe/async-validator)\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| message | 校验文案，错误提示信息  |  string | - |\n| type    | 内建校验类型，[可选项](https://github.com/yiminghe/async-validator#type) | string | `string` |\n| required | 是否必选  |  boolean | `false` |\n| whitespace | 必选时，空格是否会被视为错误 | boolean | false |\n| len | 字段长度  |  number | - |\n| min | 最小长度  |  number | - |\n| max | 最大长度  |  number | - |\n| enum | 枚举类型  |  string | - |\n| pattern | 正则表达式校验 RegExp | - |\n| validator | 自定义校验（注意，callback 必须被调用） | Function(rule, value,callback) | - |\n"

/***/ })

}]);