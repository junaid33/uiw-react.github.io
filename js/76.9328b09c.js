(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[76],{

/***/ 595:
/***/ (function(module, exports) {

module.exports = "Input 输入框\n===\n\n通过鼠标或键盘输入内容，是最基础的表单域的包装。\n\n### 基础用法\n\n<!--DemoStart--> \n这里设置了字符串长度为 `length=5`\n```js\nclass Demo extends Component {\n  log(e,value){\n    console.log(`value = ${value}`)\n  }\n  render() {\n    const {Row,Col} = Layout;\n    return (\n      <Row>\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input length=\"5\" placeholder=\"请输入内容\" \n            onChange={this.log.bind(this)}/>\n        </Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n### 定位焦点\n\n通过 `autoFocus` 属性指定 `input` 组件，当页面加载时，文本区域自动获得焦点。  \nHTML5 中的新属性。\n\n<!--DemoStart--> \n`Input` 必须在第一页，窗口可见的位置\n\n```js\nclass Demo extends Component {\n  render() {\n    const {Row,Col} = Layout;\n    return (\n      <Row>\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input autoFocus placeholder=\"请输入内容\" />\n        </Col>\n      </Row>\n    ) \n  }\n}\n```\n<!--End-->\n\n### 禁用状态\n\n通过 `disabled` 属性指定是否禁用 `input` 组件\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    const {Row,Col} = Layout;\n    return (\n      <Row  gutter=\"20\">\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input disabled placeholder=\"请输入内容\" />\n        </Col>\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input disabled icon=\"search\" placeholder=\"请输入内容\" \n            onIconClick={()=>{\n              Message.info('您点击了搜索图标。')\n            }} />\n        </Col>\n      </Row>\n    ) \n  }\n}\n```\n<!--End-->\n\n\n### 文本域\n\n通过将 `type` 属性的值指定为 `textarea`。\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    const {Row,Col} = Layout;\n    return (\n      <Row gutter=\"20\">\n        <Col md=\"12\" xs=\"24\">\n\n          <Input type=\"textarea\"placeholder=\"请输入内容\"/>\n\n          <br/>\n          <br/>\n\n          <Input \n            type=\"textarea\" \n            rows={6} \n            placeholder=\"请输入内容\"\n            defaultValue=\"通过将 type 属性的值指定为 textarea。\"\n          />\n\n        </Col>\n        <Col md=\"12\" xs=\"24\">\n\n          <Input type=\"textarea\" rows={6} cols=\"30\" placeholder=\"请输入内容\"/>\n\n        </Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n### 尺寸\n\n可通过 `size` 属性指定输入框的尺寸，除了默认的大小外，还提供了 `large`、`small` 和 `mini` 三种尺寸。\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    const {Row,Col} = Layout;\n    return (\n      <Row gutter=\"20\">\n        <Col span=\"6\">\n          <Input preIcon=\"user\" placeholder=\"请输入内容\" size=\"large\" />\n        </Col>\n        <Col span=\"6\">\n          <Input placeholder=\"请输入内容\" />\n        </Col>\n        <Col span=\"6\">\n          <Input placeholder=\"请输入内容\" size=\"small\" />\n        </Col>\n        <Col span=\"6\">\n          <Input placeholder=\"请输入内容\" size=\"mini\" />\n        </Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n### 前或后插入图标\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    const {Row,Col} = Layout;\n    return (\n      <Row gutter=\"20\">\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input preIcon=\"upload\" placeholder=\"请输入内容\" \n            onPreIconClick={(e,value)=>{\n              Message.info(`您点击了上传图标。输入框内容：${value?value:\"空\"}`)\n            }}/>\n        </Col>\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input \n            preIcon=\"user\"\n            icon=\"search\" \n            placeholder=\"请输入内容\" \n            onIconClick={(e,value)=>{\n              Message.info(`您点击了搜索图标。输入框内容：${value?value:\"空\"}`)\n            }} />\n        </Col>\n        <Col xs=\"8\" sm=\"8\" md=\"8\" xs=\"24\">\n          <Input \n            icon={<Icon type=\"search\" />} \n            placeholder=\"请输入内容\" />\n        </Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n### 前置/后置标签\n\n<!--DemoStart--> \n```js\nconst styles = {\n  maxWidth: \"280px\"\n}\nclass Demo extends Component {\n  render() {\n    return (\n      <div style={styles}>\n        <Input addonBefore=\"http://\" addonAfter=\".com\" value=\"uiw-react\" />\n        <Divider />\n        <Input addonAfter=\".com\" value=\"uiw-react\" />\n        <Divider />\n        <Input \n          addonBefore={\n            <Select style={{width: 82}} value=\"餐厅名\">\n              {\n                ['餐厅名', '订单号', '用户电话'].map((item, index) => <Select.Option key={index} label={item} value={index} />)\n              }\n            </Select>\n          } \n          addonAfter={\n            <Button icon=\"search\" type=\"primary\">搜索</Button>\n          }\n          value=\"uiw-react\" \n        />\n      </div>\n    )\n  }\n}\n```\n<!--End-->\n\n### Input\n\nInput 的其他属性和 React 自带的 [input](https://facebook.github.io/react/docs/events.html#supported-events) 一致。\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| type | 声明 input 类型，同原生 input 标签的 type 属性。另外提供 `type=\"textarea\"`。 | String | `text` |\n| value | 绑定值 | String | - |\n| defaultValue | 输入框默认内容 | String | - |\n| addonAfter | \t带标签的 input，设置后置标签 | String/ReactNode | - |\n| addonAfter | 带标签的 input，设置前置标签 | String/ReactNode | - |\n| size | 指定输入框的尺寸，除了默认的大小外，还提供了 `large`、`small` 和 `mini` 三种尺寸。 | String | - |\n| length | 输入的最大长度 | Number | Infinity |\n| autoFocus | 当页面加载时，文本区域自动获得焦点。`HTML5` 中的新属性。  | Boolean | `false` |\n| preIcon | 输入框`前`面放置图标  | String、ReactNode | - |\n| icon | 输入框`后`面放置图标  | String、ReactNode | - |\n| onPreIconClick | 输入框`前`面放置的图标鼠标点击事件  | Function(value) | - |\n| onPreIconMouseOver | 输入框`前`面放置的图标，移到图标上的事件  | Function(value) | - |\n| onPreIconMouseOut | 输入框`前`面放置的图标，移开图标上的事件  | Function(value) | - |\n| onIconClick | 输入框`后`面放置的图标鼠标点击事件  | Function(value) | - |\n| onIconMouseOver | 输入框`后`面放置的图标，移到图标上的事件  | Function(value) | - |\n| onIconMouseOut | 输入框`后`面放置的图标，移开图标上的事件  | Function(value) | - |\n| onSearch | 输入框摁`Enter`执行这个事件  | Function(e:Event,value) | - |\n"

/***/ })

}]);