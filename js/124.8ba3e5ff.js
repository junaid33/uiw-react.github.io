(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[124],{

/***/ 643:
/***/ (function(module, exports) {

module.exports = "Layout 布局\n===\n\n通过基础的 `24` 分栏，迅速简便地创建布局。 主要由 `Layout.Row` 和 `Layout.Col` 来实现布局。\n\n### 基本用法\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    //下面这段样式可以写入css中通过 className 来使用\n    let styleCol = {background: \"lightgrey\",lineHeight:\"36px\",textAlign:\"center\"};\n    let styleColLight = {background: \"#e3e3e3\",lineHeight:\"36px\",textAlign:\"center\"};\n    let styleRow = {marginBottom: \"20px\"};\n\n    const {Row,Col} = Layout;\n\n    return (\n      <div>\n        <Row style={styleRow}>\n          <Col span=\"24\"><div style={styleCol}>100%, span=24</div></Col>\n        </Row>\n        <Row style={styleRow}>\n          <Col span=\"12\"><div style={styleCol}>50%, span=12</div></Col>\n          <Col span=\"12\"><div style={styleColLight}>50%, span=12</div></Col>\n        </Row>\n        <Row style={styleRow}>\n          <Col span=\"8\"><div style={styleCol}>33.33%, span=8</div></Col>\n          <Col span=\"8\"><div style={styleColLight}>33.33%, span=8</div></Col>\n          <Col span=\"8\"><div style={styleCol}>33.33%, span=8</div></Col>\n        </Row>\n        <Row style={styleRow}>\n          <Col span=\"6\"><div style={styleCol}>25%, span=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>25%, span=6</div></Col>\n          <Col span=\"6\"><div style={styleCol}>25%, span=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>25%, span=6</div></Col>\n        </Row>\n        <Row>\n          <Col span=\"4\"><div style={styleCol}>16.66667%, span=4</div></Col>\n          <Col span=\"4\"><div style={styleColLight}>16.66667%, span=4</div></Col>\n          <Col span=\"4\"><div style={styleCol}>16.66667%, span=4</div></Col>\n          <Col span=\"4\"><div style={styleColLight}>16.66667%, span=4</div></Col>\n          <Col span=\"4\"><div style={styleCol}>16.66667%, span=4</div></Col>\n          <Col span=\"4\"><div style={styleColLight}>16.66667%, span=4</div></Col>\n        </Row>\n      </div>\n    )\n  }\n}\n```\n<!--End-->\n\n### 分栏间隔\n\n分栏之间存在间隔，通过设置`Row` 属性 `gutter` 的值。\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    //下面这段样式可以写入css中通过 className 来使用\n    let styleCol = {background: \"lightgrey\",lineHeight:\"36px\",textAlign:\"center\"};\n    let styleColLight = {background: \"#e3e3e3\",lineHeight:\"36px\",textAlign:\"center\"};\n\n    const {Row,Col} = Layout;\n\n    return (\n      <Row gutter=\"20\">\n        <Col span=\"6\"><div style={styleCol}>span=6</div></Col>\n        <Col span=\"6\"><div style={styleColLight}>span=6</div></Col>\n        <Col span=\"6\"><div style={styleCol}>span=6</div></Col>\n        <Col span=\"6\"><div style={styleColLight}>span=6</div></Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n### 混合布局\n\n<!--DemoStart--> \n```js\nclass Demo extends Component {\n  render() {\n    //下面这段样式可以写入css中通过 className 来使用\n    let styleCol = {background: \"lightgrey\",lineHeight:\"36px\",textAlign:\"center\"};\n    let styleColLight = {background: \"#e3e3e3\",lineHeight:\"36px\"};\n    let styleRow = {marginBottom: \"20px\"};\n\n    const {Row,Col} = Layout;\n\n    return (\n      <div style={{backgroundColor: \"#f7f7f7\"}}>\n        <Row style={styleRow} gutter=\"20\">\n          <Col span=\"16\"><div style={styleCol}>span=16</div></Col>\n          <Col span=\"8\"><div style={styleCol}>span=8</div></Col>\n        </Row>\n        <Row style={styleRow} gutter=\"20\">\n          <Col span=\"8\"><div style={styleCol}>span=8</div></Col>\n          <Col span=\"8\"><div style={styleCol}>span=8</div></Col>\n          <Col span=\"4\"><div style={styleCol}>span=4</div></Col>\n          <Col span=\"4\"><div style={styleCol}>span=4</div></Col>\n        </Row>\n        <Row gutter=\"20\">\n          <Col span=\"4\"><div style={styleCol}>span=4</div></Col>\n          <Col span=\"16\"><div style={styleCol}>span=16</div></Col>\n          <Col span=\"4\"><div style={styleCol}>span=4</div></Col>\n        </Row>\n      </div>\n    )\n  }\n}\n```\n<!--End-->\n\n\n### 左右分栏偏移\n\n使用 `offset` 可以将列向右侧偏。例如，`offset={4}` 将元素向右侧偏移了 `4`个列`column`的宽度。\n\n<!--DemoStart--> \n```js\n//下面这段样式可以写入css中通过 className 来使用\nlet styleCol = {background: \"lightgrey\",lineHeight:\"36px\",textAlign:\"center\"};\nlet styleColLight = {background: \"#e3e3e3\",lineHeight:\"36px\",textAlign:\"center\"};\nlet styleRow = {marginBottom: \"20px\"};\n\nconst {Row,Col} = Layout;\n\nclass Demo extends Component {\n  render() {\n    return (\n      <div>\n        <Row style={styleRow}>\n          <Col style={styleCol} span={8}>col=8</Col>\n          <Col style={styleColLight} span={8} offset={8}>col=8</Col>\n        </Row>\n        <Row style={styleRow}>\n          <Col style={styleCol} span={6} offset={6}>col=6, offset=6</Col>\n          <Col style={styleColLight} span={6} offset={6}>col=6, offset=6</Col>\n        </Row>\n        <Row>\n          <Col style={styleCol} span={12} offset={6}>col=12, offset=6</Col>\n        </Row>\n      </div>\n    )\n  }\n}\n```\n<!--End-->\n\n\n### flex布局\n\n使用 Layout.Row `flex` 定义 `flex` 布局，其子元素根据不同的值 `start`,`center`,`end`,`space-between`,`space-around`，分别定义其在父节点里面的排版方式。  \n具体可以参考[阮一峰 Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool)\n\n<!--DemoStart--> \n- `start（默认值）`：左对齐\n- `end`：右对齐\n- `center`： 居中\n- `space-between`：两端对齐，项目之间的间隔都相等。\n- `space-around`：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n```js\n//下面这段样式可以写入css中通过 className 来使用\nlet styleCol = {background: \"lightgrey\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleColLight = {background: \"#e3e3e3\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleRow = {marginBottom: \"20px\",background: \"#f7f7f7\"};\nlet styleRow2 = {background: \"#f7f7f7\"};\nconst {Row,Col} = Layout;\n\nclass Demo extends Component {\n  render() {\n    return (\n      <div>\n        <Row style={styleRow} type=\"flex\">\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n        </Row>\n        <Row style={styleRow} type=\"flex\" justify=\"center\">\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n        </Row>\n        <Row style={styleRow} type=\"flex\" justify=\"end\">\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n        </Row>\n        <Row style={styleRow} type=\"flex\" justify=\"space-between\">\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n        </Row>\n        <Row style={styleRow2} type=\"flex\" justify=\"space-around\">\n          <Col span=\"6\"><div style={styleCol}>col=6</div></Col>\n          <Col span=\"6\"><div style={styleColLight}>col=6</div></Col>\n          <Col span={6}><div style={styleCol}>col={6}</div></Col>\n        </Row>\n      </div>\n    )\n  }\n}\n```\n<!--End-->\n\n\n### Flex 对齐\n\n<!--DemoStart--> \n- `top` 交叉轴的起点对齐。设置样式 ~~`align-items: flex-start`~~ 默认不设置\n- `bottom` 交叉轴的终点对齐。设置样式 `align-items: flex-end`\n- `center` 交叉轴的中点对齐。设置样式 `align-items: center`\n- `baseline` 项目的第一行文字的基线对齐。设置样式 `align-items: baseline`\n- ~~`stretch（默认值）`~~ 如果Col未设置高度或设为auto，将占满整个容器的高度。不需要设置`align`\n```js\n//下面这段样式可以写入css中通过 className 来使用\nlet styleCol1 = {background: \"lightgrey\",lineHeight:\"136px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleCol2 = {background: \"#e3e3e3\",height:\"50px\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleCol3 = {background: \"lightgrey\",height:\"70px\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleCol4 = {background: \"#e3e3e3\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleRow1 = {marginBottom: \"20px\",background: \"#f7f7f7\"};\nlet styleRow2 = {background: \"#f7f7f7\"};\n\nconst {Row,Col} = Layout;\n\nclass Demo extends Component {\n  render() {\n    return (\n      <div>\n        <p>Align Top</p>\n        <Row type=\"flex\" justify=\"center\" align=\"top\" style={styleRow1}>\n          <Col span=\"4\"><div style={styleCol1}></div></Col>\n          <Col span=\"4\"><div style={styleCol2}></div></Col>\n          <Col span=\"4\"><div style={styleCol3}></div></Col>\n        </Row>\n        <p>Align Center</p>\n        <Row type=\"flex\" justify=\"space-around\" align=\"middle\" style={styleRow1}>\n          <Col span=\"4\"><div style={styleCol1}></div></Col>\n          <Col span=\"4\"><div style={styleCol2}></div></Col>\n          <Col span=\"4\"><div style={styleCol3}></div></Col>\n        </Row>\n        <p>Align Bottom</p>\n        <Row type=\"flex\" justify=\"space-between\" align=\"bottom\" style={styleRow1}>\n          <Col span=\"4\"><div style={styleCol1}></div></Col>\n          <Col span=\"4\"><div style={styleCol2}></div></Col>\n          <Col span=\"4\"><div style={styleCol3}></div></Col>\n        </Row>\n        <p>Align Bottom Right</p>\n        <Row type=\"flex\" justify=\"end\" align=\"bottom\" style={styleRow1}>\n          <Col span=\"4\"><div style={styleCol1}></div></Col>\n          <Col span=\"4\"><div style={styleCol2}></div></Col>\n          <Col span=\"4\"><div style={styleCol3}></div></Col>\n        </Row>\n        <p>项目的第一行文字的基线对齐。</p>\n        <Row type=\"flex\" justify=\"center\" align=\"baseline\" style={styleRow2}>\n          <Col span=\"4\" style={styleCol1}><div>align=\"baseline\"</div></Col>\n          <Col span=\"4\" style={styleCol2}><div>align=\"baseline\"</div></Col>\n          <Col span=\"4\" style={styleCol3}><div>align=\"baseline\"</div></Col>\n        </Row>\n      </div>\n    )\n  }\n}\n```\n<!--End-->\n\n### Flex 排序\n\n通过 `Flex` 布局的 `order` 来改变元素的排序。\n\n<!--DemoStart--> \n```js\n//下面这段样式可以写入css中通过 className 来使用\nlet styleCol = {background: \"lightgrey\",lineHeight:\"36px\",textAlign:\"center\"};\nlet styleColLight = {background: \"#e3e3e3\",lineHeight:\"36px\",textAlign:\"center\"};\n\nconst {Row,Col} = Layout;\nclass Demo extends Component {\n  render() {\n\n    return (\n      <Row type=\"flex\">\n        <Col span={6} order={4} style={styleCol}>span=1, order=4</Col>\n        <Col span={6} order={3} style={styleColLight}>span=2, order=3</Col>\n        <Col span={6} order={2} style={styleCol}>span=3, order=2</Col>\n        <Col span={6} order={1} style={styleColLight}>span=4, order=1</Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n\n### 响应式布局\n\n参照 [Bootstrap](http://getbootstrap.com/) 的 响应式设计，预设了四个响应尺寸：xs、sm、md和lg。\n\n```css\n/* 超小屏幕（手机，小于 768px） */\n/* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的 */\n/* @media (max-width: @screen-xs) { ... } */\n\n/* 小屏幕（平板，大于等于 768px） */\n@media (min-width: @screen-sm) { ... }\n\n/* 中等屏幕（桌面显示器，大于等于 992px） */\n@media (min-width: @screen-md) { ... }\n\n/* 大屏幕（大桌面显示器，大于等于 1200px） */\n@media (min-width: @screen-lg) { ... }\n```\n\n<!--DemoStart--> \n<table>\n  <tr>\n    <th></th>\n    <th>超小屏幕 手机 (<768px)</th>\n    <th>小屏幕 平板 (≥768px)</th>\n    <th>中等屏幕 桌面显示器 (≥992px)</th>\n    <th>大屏幕 大桌面显示器 (≥1200px)</th>\n  </tr>\n  <tr>\n    <td>参数</td>\n    <td>xs</td>\n    <td>sm</td>\n    <td>md</td>\n    <td>lg</td>\n  </tr>\n  <tr>\n      <td>栅格系统行为</td>\n      <td>总是水平排列</td>\n      <td colspan=\"3\">开始是堆叠在一起的，当大于这些阈值时将变为水平排列</td>\n  </tr>\n</table>\n\n```js\n//下面这段样式可以写入css中通过 className 来使用\nlet styleCol = {background: \"lightgrey\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleCol2 = {background: \"#e3e3e3\",lineHeight:\"36px\",minHeight: \"36px\",textAlign:\"center\"};\nlet styleRow = {background: \"#f7f7f7\",padding:\"5px 0\"};\n\nconst {Row,Col} = Layout;\nclass Demo extends Component {\n  render() {\n    // xs 默认不用设置\n    return (\n      <Row style={styleRow} gutter=\"10\">\n        <Col xs=\"24\" sm=\"6\" md=\"4\" lg=\"3\"><div style={styleCol}></div></Col>\n        <Col xs=\"24\" sm=\"6\" md=\"8\" lg=\"9\"><div style={styleCol2}></div></Col>\n        <Col xs=\"24\" sm=\"6\" md=\"8\" lg=\"9\"><div style={styleCol}></div></Col>\n        <Col xs=\"24\" sm=\"6\" md=\"4\" lg=\"3\"><div style={styleCol2}></div></Col>\n      </Row>\n    )\n  }\n}\n```\n<!--End-->\n\n## API\n\n### Row\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| gutter | 栅格间隔间距 | number | - |\n| type | 布局模式，可选 `flex`，[现代浏览器](http://caniuse.com/#search=flex) 下有效 | string | - |\n| justify | flex 布局下的水平排列方式：`start`,`center`,`end`,`space-between`,`space-around` | number | - |\n| align | flex 布局下的垂直对齐方式：`top`,`middle`,`bottom`,`baseline` | number | - |\n\n\n### Col\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| span | 栅格占据的列数，必选参数 `0 < span < 24`，默认设置`24`宽度 `100%`，可设置`0`取消这一默认值 | number | - |\n| order | 栅格顺序，`flex` 布局模式下有效 | number | 0 |\n| offset | 栅格左侧的间隔格数，将列向右侧偏 | number | 0 |\n| push | 栅格向右移动格数 | number | 0 |\n| pull | 栅格向左移动格数 | number | 0 |\n| xs | `<768px` 默认的样式不需要设置 | number | - |\n| sm | `≥768px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | 0 |\n| md | `≥992px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | 0 |\n| lg | `≥1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象 | number | 0 |\n"

/***/ })

}]);