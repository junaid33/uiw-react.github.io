(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[51],{

/***/ 567:
/***/ (function(module, exports) {

module.exports = "Transition 过渡动画\n===\n\n用于页面中展示过渡动画。\n\n## 基本用法\n\n进入、出现、离开动画\n\n<!--DemoStart-->\n```js\nconstructor(props) {\n  super(props);\n  this.state = { \n    show: true,\n    options:[\n      { value: 'fadeIn down', label: '向下淡进向上淡出' }, \n      { value: 'fadeIn up', label: '向上淡进向下淡出' }, \n      { value: 'fadeIn right', label: '在右淡进淡出' }, \n      { value: 'fadeIn left', label: '在左淡进淡出' }, \n    ],\n    value: 'fadeIn down',\n    labe: \"向下淡进向上淡出\",\n  }\n}\ntoggleIn () {\n  this.setState({ show: !this.state.show })\n}\nonChange(e,value){\n  this.setState({ value })\n}\nrender() {\n  const { show } = this.state\n  return (\n    <div>  \n      <Select onChange={this.onChange.bind(this)} style={{width:200,margin:\"0 10px 0 0\"}} value={this.state.value}>\n        {\n          this.state.options.map((elm,idx)=> {\n            return <Select.Option key={elm.value} label={elm.label} value={elm.value}/>\n          })\n        }\n      </Select>\n      <Button size=\"small\" onClick={this.toggleIn.bind(this)}>\n        {show?'消失':'显示'}\n      </Button>\n      <div style={{padding:\"20px 0 10px 5px\",maxWidth:200}}>\n        <Transition in={show}  sequence={this.state.value}>\n          <div>\n            {this.state.labe}\n          </div>\n        </Transition>\n      </div>\n    </div>\n  )\n}\n```\n<!--End-->\n\n## 淡出不卸载组件\n\n<!--DemoStart-->\n```js\nconstructor(props) {\n  super(props);\n  this.state = { show: true }\n}\ntoggleIn () {\n  this.setState({ show: !this.state.show })\n}\nrender() {\n  const { show } = this.state\n  return (\n    <div>  \n      <Button size=\"mini\" onClick={this.toggleIn.bind(this)}>\n        {show?'消失':'显示'}\n      </Button>\n      <div style={{padding:\"20px 0 10px 0\",maxWidth:200}}>\n        <Transition in={show} unmountOnExit={false} sequence='fadeIn'>\n          <div>\n            淡进淡入\n          </div>\n        </Transition>\n      </div>\n    </div>\n  )\n}\n```\n<!--End-->\n\n## 高宽改变动画\n\n<!--DemoStart-->\n```js\nconstructor(props) {\n  super(props);\n  this.state = { \n    show: true ,\n    show2:true\n  }\n}\ntoggleIn (ty) {\n  this.setState({ \n    [`${ty}`]: !this.state[ty] \n  })\n}\nrender() {\n  const { show,show2 } = this.state\n  return (\n    <div>  \n      <Button size=\"mini\" onClick={this.toggleIn.bind(this,'show')}> {show?'消失':'显示'} </Button>\n      <div style={{padding:\"20px 0 10px 0\",maxWidth:200}}>\n        <Transition in={show} unmountOnExit={false} sequence='height' style={{background:\"#e2e2e2\"}}>\n          <div>\n            <div style={{padding:10}}>\n              高度改变动画支持\n            </div>\n          </div>\n        </Transition>\n      </div>\n      <Button size=\"mini\" onClick={this.toggleIn.bind(this,'show2')}> {show2?'消失':'显示'} </Button>\n      <div style={{padding:\"20px 0 10px 0\",maxWidth:200}}>\n        <Transition in={show2} unmountOnExit={false} sequence='width' style={{background:\"#e2e2e2\"}}>\n          <div>\n            <div style={{padding:10}}>\n              高度改变动画支持\n            </div>\n          </div>\n        </Transition>\n      </div>\n    </div>\n  )\n}\n```\n<!--End-->\n\n\n## 自定义动画\n\n定义动画样式`flipInX`，下面是[Less](http://lesscss.org/)代码，你可以使用其它方式，比如有原生CSS、[Stylus](http://stylus-lang.com/)、[SASS](http://sass-lang.com/)\n\n```css\n.w-animate{\n  &.is-flipInX {\n    &.is-mounting { // 安装\n      transform: translate3d(0, -100%, 0); \n    }\n    &.is-mounted { // 安装完\n      transform: translate3d(0, 0, 0); \n    }\n  \n    &.is-unmounting { // 卸载\n      transform: translate3d(0, -100%, 0); \n    }\n  \n    &.is-unmounted { // 卸载完\n      transform: translate3d(0, -100%, 0); \n    }\n  }\n}\n```\n\n引用自定义动画`flipInX`\n\n```html\n<Transition in={show} sequence='flipInX'>\n  <div> 在左淡进淡出 </div>\n</Transition>\n```\n\n## API\n\n### Transition \n\n可以通过 [Animate.css](https://daneden.github.io/animate.css/) 制作更多的过度动画。变化比较大，动画库重写了，请使用最新版本。动画组件根据[react-transition-group](https://reactcommunity.org/react-transition-group/#Transition) 动画过渡组件二次封装\n\n**v1.1.15+**\n\n| 参数      | 说明    | 类型      |  默认值   |\n|--------- |-------- |---------- |-------- |\n| sequence | 动画效果 默认可选`fadeIn`、`down`、`up`、`right`、`left`、`height`、`width` | String | - |\n| [in](https://reactcommunity.org/react-transition-group/#Transition-prop-in) | 显示组件; 触发进入或退出状态 | Bool | `false` |\n| animateOnMount | 安装动画 | Bool | `true` |\n| duration | 持续时间 | Number | `200` |\n| [wait](https://reactcommunity.org/react-transition-group/#Transition-prop-timeout) | 等待时间时间 | Number | `200` |\n| prefixCls | 默认样式`w-animate` | String | w-animate |\n| ~~unmountOnBeforEnter~~ | ~~默认 `true` 进入之前不装载组件~~ | Bool | `true` |\n| [unmountOnExit](https://reactcommunity.org/react-transition-group/#Transition-prop-unmountOnExit) | 默认 `true` 退出动画卸载组件 | Bool | `true` |\n| [mountOnEnter](https://reactcommunity.org/react-transition-group/#Transition-prop-mountOnEnter) | 默认情况下，子组件与父Transition组件一起立即安装。 如果要“lazy mount”组件的第一个in = {true}，可以设置mountOnEnter。 在第一次进入转换之后，组件将保持安装，即使是“退出”，除非您还要指定unmountOnExit。 | Number | `false` |\n| ~~onTransitionendEnter~~ | 动画进入完成(v1.2.10不支持，请使用`onEntered`) | Function(props)=>{} | - |\n| ~~onTransitionendExit~~ | 动画退出完成(v1.2.10不支持，请使用`onExited`) | Function(props)=>{} | - |\n| onEnter | 应用`entering`状态之前发出的回调。<br/>一个额外的参数`isAppearing`供给表明如果进入阶段是在初始安装的发生。 | Function(node: HtmlElement, isAppearing: bool) | - |\n| onEntering | 应用`entering`状态后发出的回调。<br/>一个额外的参数`isAppearing`供给表明如果进入阶段是在初始安装的发生。 | Function(node: HtmlElement, isAppearing: bool) | - |\n| onEntered | 在应用`exiting`状态之前启动回调。 | Function(node: HtmlElement, isAppearing: bool) -> void | - |\n| onExit | 在应用`exiting`状态之前启动回调。 | Function(node: HtmlElement) -> void | - |\n| onExiting | 在`exiting`状态被应用后，回调触发。 | Function(node: HtmlElement) -> void | - |\n| onExited | 在`exited`状态被应用后，回调触发。 | Function(node: HtmlElement) -> void | - |\n\n**v1.1.13**\n\n| 参数      | 说明    | 类型      |  默认值   |\n|--------- |-------- |---------- |-------- |\n| type | 指定可选项 `fade-in` 、`fade-left`、 `fade-right` 、 `fade-down` | String | - |\n| visible | 动画会产生一个根节点，设置 `false` 销毁 | Bool | `true` |\n| appear | 出现 | Bool | `true` |\n| leave | 离开 | Bool | `true` |\n| enter | 进入 | Bool | `true` |\n| AppearTimeout | 出现时间[自定义过渡效果起作用] | Number | 250 |\n| LeaveTimeout | 离开时间[自定义过渡效果起作用] | Number | 250 |\n| EnterTimeout | 进入时间[自定义过渡效果起作用] | Number | 500 |\n| prefixCls | 自定义过渡效果。自带过渡效果，时间设置是没有用的，通过这个来自定义一个样式，默认样式 “w-animate”，自定义样式会拼接成 “w-animate-fade-in”，在CSS样式里面，根据react-transition-group规则最终需要这样写样式，\".w-animate-fade-in-leave\" | String | w-animate |"

/***/ })

}]);